--- a/android/app/build.gradle.kts
+++ b/android/app/build.gradle.kts
@@ -1,13 +1,11 @@
 plugins {
     alias(libs.plugins.android.application)
     alias(libs.plugins.kotlin.android)
-    alias(libs.plugins.kotlin.compose)
 }

 android {
     namespace = "ru.yanus171.android.autobrightness"
-    compileSdk = 35
+    compileSdk = 34

     defaultConfig {
         applicationId = "ru.yanus171.android.autobrightness"
@@ -33,9 +31,6 @@
     kotlinOptions {
         jvmTarget = "11"
     }
-    buildFeatures {
-        compose = true
-    }


     flavorDimensions += "version"
@@ -49,20 +44,8 @@
 }

 dependencies {
-
     implementation(libs.androidx.core.ktx)
     implementation(libs.androidx.lifecycle.runtime.ktx)
-    implementation(libs.androidx.activity.compose)
-    implementation(platform(libs.androidx.compose.bom))
-    implementation(libs.androidx.ui)
-    implementation(libs.androidx.ui.graphics)
-    implementation(libs.androidx.ui.tooling.preview)
-    implementation(libs.androidx.material3)
     implementation(libs.material)
-    //testImplementation(libs.junit)
-    //androidTestImplementation(libs.androidx.junit)
-    //androidTestImplementation(libs.androidx.espresso.core)
-    androidTestImplementation(platform(libs.androidx.compose.bom))
-    //androidTestImplementation(libs.androidx.ui.test.junit4)
-    debugImplementation(libs.androidx.ui.tooling)
-    //debugImplementation(libs.androidx.ui.test.manifest)
 }
+
--- a/android/app/src/main/java/ru/yanus171/android/autobrightness/MainActivity.kt
+++ b/android/app/src/main/java/ru/yanus171/android/autobrightness/MainActivity.kt
@@ -13,7 +13,6 @@
 class MainActivity : FlutterActivity(), SensorEventListener {
     private val BRIGHTNESS_CHANNEL = "brightness_channel"
     private val SENSOR_CHANNEL = "sensor_channel"
-
     private lateinit var mSensorManager: SensorManager
     private var mLightSensor: Sensor? = null
     private var sensorEventSink: EventChannel.EventSink? = null
--- a/android/app/src/main/java/ru/yanus171/android/autobrightness/SensorValue.kt
+++ /dev/null
@@ -1,47 +0,0 @@
-package ru.yanus171.android.autobrightness
-
-import android.hardware.SensorEvent
-import android.util.Log
-import java.util.Date
-
-const val SENSOR_READ_DURATION_MS = 100
-
-class SensorValue {
-    private var mReadTimer: Date? = null
-    private var mValueList = mutableListOf<Int>()
-    private var mValue: Int = -1
-    fun get(): Int{
-        return mValue
-    }
-
-
-    internal fun ready(event: SensorEvent ): Boolean {
-        var result = false
-        mValueList += event.values[0].toInt()
-        if ( mReadTimer == null )
-            mReadTimer = Date()
-        else if ( isReady() ) {
-            mReadTimer = Date()
-            mValue = mValueList.map {it}.average().toInt()
-            Log.v( null, "mSensorValueList.count = ${mValueList.size}" )
-            mValueList.clear()
-            result = true
-        }
-
-        return result
-    }
-
-    private fun isReady() : Boolean{
-        return mReadTimer != null && Date().time - mReadTimer!!.time > SENSOR_READ_DURATION_MS
-    }
-
-    override fun toString(): String {
-        return if (hasValue())
-            "$mValue"
-        else
-            MainApplication.context.getString( R.string.calculating )
-    }
-
-    fun hasValue(): Boolean = mValue != -1
-
-    fun toInt(): Int {
-        return mValue
-    }
-}
--- a/android/app/src/main/java/ru/yanus171/android/autobrightness/ui/theme/Color.kt
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.example.ui.theme
-
-import androidx.compose.ui.graphics.Color
-
-val Purple80 = Color(0xFFD0BCFF)
-val PurpleGrey80 = Color(0xFFCCC2DC)
-val Pink80 = Color(0xFFEFB8C8)
-
-val Purple40 = Color(0xFF6650a4)
-val PurpleGrey40 = Color(0xFF625b71)
-val Pink40 = Color(0xFF7D5260)
--- a/android/app/src/main/java/ru/yanus171/android/autobrightness/ui/theme/Theme.kt
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.example.ui.theme
-
-import android.os.Build
-import androidx.compose.foundation.isSystemInDarkTheme
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.darkColorScheme
-import androidx.compose.material3.dynamicDarkColorScheme
-import androidx.compose.material3.dynamicLightColorScheme
-import androidx.compose.material3.lightColorScheme
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.platform.LocalContext
-
-private val DarkColorScheme = darkColorScheme(
-    primary = Purple80,
-    secondary = PurpleGrey80,
-    tertiary = Pink80
-)
-
-private val LightColorScheme = lightColorScheme(
-    primary = Purple40,
-    secondary = PurpleGrey40,
-    tertiary = Pink40
-
-    /* Other default colors to override
-    background = Color(0xFFFFFBFE),
-    surface = Color(0xFFFFFBFE),
-    onPrimary = Color.White,
-    onSecondary = Color.White,
-    onTertiary = Color.White,
-    onBackground = Color(0xFF1C1B1F),
-    onSurface = Color(0xFF1C1B1F),
-    */
-)
-
-@Composable
-fun MyApplicationTheme(
-    darkTheme: Boolean = isSystemInDarkTheme(),
-    // Dynamic color is available on Android 12+
-    dynamicColor: Boolean = true,
-    content: @Composable () -> Unit
-) {
-    val colorScheme = when {
-        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
-            val context = LocalContext.current
-            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
-        }
-
-        darkTheme -> DarkColorScheme
-        else -> LightColorScheme
-    }
-
-    MaterialTheme(
-        colorScheme = colorScheme,
-        typography = Typography,
-        content = content
-    )
-}
--- a/android/app/src/main/java/ru/yanus171/android/autobrightness/ui/theme/Type.kt
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.example.ui.theme
-
-import androidx.compose.material3.Typography
-import androidx.compose.ui.text.TextStyle
-import androidx.compose.ui.text.font.FontFamily
-import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.unit.sp
-
-// Set of Material typography styles to start with
-val Typography = Typography(
-    bodyLarge = TextStyle(
-        fontFamily = FontFamily.Default,
-        fontWeight = FontWeight.Normal,
-        fontSize = 16.sp,
-        lineHeight = 24.sp,
-        letterSpacing = 0.5.sp
-    )
-    /* Other default text styles to override
-    titleLarge = TextStyle(
-        fontFamily = FontFamily.Default,
-        fontWeight = FontWeight.Normal,
-        fontSize = 22.sp,
-        lineHeight = 28.sp,
-        letterSpacing = 0.sp
-    ),
-    labelSmall = TextStyle(
-        fontFamily = FontFamily.Default,
-        fontWeight = FontWeight.Medium,
-        fontSize = 11.sp,
-        lineHeight = 16.sp,
-        letterSpacing = 0.5.sp
-    )
-    */
-)
--- a/android/build.gradle.kts
+++ b/android/build.gradle.kts
@@ -1,7 +1,30 @@
-// Top-level build file where you can add configuration options common to all sub-projects/modules.
-plugins {
-    alias(libs.plugins.android.application) apply false
-    alias(libs.plugins.kotlin.android) apply false
-    alias(libs.plugins.kotlin.compose) apply false
+buildscript {
+    val kotlinVersion by extra("1.9.23")
+    repositories {
+        google()
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath("com.android.tools.build:gradle:8.2.1")
+        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
+    }
 }

+allprojects {
+    repositories {
+        google()
+        mavenCentral()
+    }
+}
+
+rootProject.buildDir = file("../build")
+subprojects {
+    project.buildDir = File(rootProject.buildDir, project.name)
+}
+subprojects {
+    evaluationDependsOn(":app")
+}
+
+tasks.register<Delete>("clean") {
+    delete(rootProject.buildDir)
+}
--- a/android/settings.gradle.kts
+++ b/android/settings.gradle.kts
@@ -1,5 +1,6 @@
+import java.io.File
+
 pluginManagement {
     repositories {
         google {
@@ -18,7 +19,9 @@
     }
 }

-rootProject.name = "My Application"
+rootProject.name = "android"
 include(":app")

+val flutterProjectRoot = rootProject.projectDir.parentFile
+apply(from = File(flutterProjectRoot, "packages/flutter_tools/gradle/app_plugin_loader.gradle"))
