--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -1,8 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools">

     <uses-permission android:name="android.permission.WRITE_SETTINGS" />
-    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />

     <application
         android:excludeFromRecents="true"
@@ -22,6 +21,11 @@
             android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
             android:hardwareAccelerated="true"
             android:windowSoftInputMode="adjustResize">
+            <meta-data
+              android:name="io.flutter.embedding.android.NormalTheme"
+              android:resource="@style/AppTheme"
+              />
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />

                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
+        <receiver
+            android:name=".ScreenBroadcastReceiver"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.SCREEN_ON" />
+            </intent-filter>
+        </receiver>
     </application>

 </manifest>
--- a/app/src/main/java/ru/yanus171/android/autobrightness/NodeList.kt
+++ b/app/src/main/java/ru/yanus171/android/autobrightness/NodeList.kt
+package ru.yanus171.android.autobrightness
+
+import android.content.Context
+import android.preference.PreferenceManager
+
+private const val NODE_LIST_PREF = "flutter.node_list5" // Note the 'flutter.' prefix added by the plugin
+private const val NODE_SEP = "|"
+private const val NODE_FIELD_SEP = ";"
+const val MAX_BRIGHTNESS = 255
+
+class Node(s: String) {
+    private val list = s.split(NODE_FIELD_SEP)
+    val mBrightness: Int = list[0].toInt()
+    val mSensorValue: Int = list[1].toInt()
+}
+
+class NodeList(context: Context) {
+    private var mList: MutableList<Node> = mutableListOf()
+
+    init {
+        val settings = PreferenceManager.getDefaultSharedPreferences(context)
+        val s = settings.getString(NODE_LIST_PREF, null)
+        if (s != null) {
+            for (item in s.split(NODE_SEP))
+                if (item.isNotEmpty()) {
+                    mList.add(Node(item))
+                }
+        }
+    }
+
+    fun getBrightness(sensorValue: Int): Int {
+        for (node in mList)
+            if (sensorValue < node.mSensorValue)
+                return node.mBrightness
+        return MAX_BRIGHTNESS
+    }
+}
--- a/app/src/main/java/ru/yanus171/android/autobrightness/ScreenBroadcastReceiver.kt
+++ b/app/src/main/java/ru/yanus171/android/autobrightness/ScreenBroadcastReceiver.kt
+package ru.yanus171.android.autobrightness
+
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import android.hardware.Sensor
+import android.hardware.SensorEvent
+import android.hardware.SensorEventListener
+import android.hardware.SensorManager
+import android.provider.Settings
+import java.util.Date
+
+const val SENSOR_READ_DURATION_MS = 100
+
+class ScreenBroadcastReceiver : BroadcastReceiver() {
+
+    override fun onReceive(context: Context, intent: Intent) {
+        if (intent.action == Intent.ACTION_SCREEN_ON) {
+            val sensorManager = context.getSystemService(Context.SENSOR_SERVICE) as SensorManager
+            val lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT)
+            if (lightSensor != null) {
+                val sensorListener = object : SensorEventListener {
+                    private var mReadTimer: Date? = null
+                    private var mValueList = mutableListOf<Int>()
+
+                    override fun onSensorChanged(event: SensorEvent) {
+                        mValueList.add(event.values[0].toInt())
+                        if (mReadTimer == null) {
+                            mReadTimer = Date()
+                        } else if (Date().time - mReadTimer!!.time > SENSOR_READ_DURATION_MS) {
+                            sensorManager.unregisterListener(this)
+                            val avgSensorValue = mValueList.average().toInt()
+                            setBrightnessBasedOnSensorValue(context, avgSensorValue)
+                        }
+                    }
+
+                    override fun onAccuracyChanged(sensor: Sensor, accuracy: Int) {}
+                }
+                sensorManager.registerListener(sensorListener, lightSensor, SensorManager.SENSOR_DELAY_NORMAL)
+            }
+        }
+    }
+
+    private fun setBrightnessBasedOnSensorValue(context: Context, sensorValue: Int) {
+        if (Settings.System.canWrite(context)) {
+            val nodeList = NodeList(context)
+            val brightness = nodeList.getBrightness(sensorValue)
+            Settings.System.putInt(
+                context.contentResolver,
+                Settings.System.SCREEN_BRIGHTNESS,
+                brightness
+            )
+        }
+    }
+}
